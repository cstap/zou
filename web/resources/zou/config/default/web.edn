{:server
 {:zou/constructor  zou.web.immutant-web/map->WebServer
  :zou/dependencies {:handler :endpoint}
  :port             3000}

 :endpoint
 {:zou/constructor  zou.web.endpoint/map->Endpoint
  :zou/dependencies {:router :router
                     :middlewares :middlewares
                     :request-logger :request-logger}}

 :router
 {:zou/constructor  zou.web.routing.bidi/map->BidiRouter
  :zou/dependencies {:route-providers :tag/route-provider
                     :handler-finder :handler-finder
                     :middlewares :routed-middlewares}
  :zou/tags         [:tag/cargo :tag/view-model]
  :dynamic?         #zou/when-dev true}

 :handler-finder
 {:zou/constructor zou.web.finder.rule/map->RuleBasedFinder
  :mappings {}
  ;; :zou/constructor zou.web.finder.metadata/map->MetadataBasedFinder
  ;; :dynamic?        true
  ;; :tag-name        :zou/handler
  }

 :routes
 {:zou/constructor zou.web.routing.route-provider/map->SimpleRouteProvider
  :zou/tags        [:tag/route-provider]
  ;; :spec            ["/" {"" :hello-world
  ;;                        ["greet/" :people] :greet}]
  }

 :view-finder
 {:zou/constructor zou.web.finder.rule/map->RuleBasedFinder
  :mappings {}}

 :view
 {:zou/constructor  zou.web.view.generic/map->GenericView
  :zou/dependencies {:renderable-finder :view-finder}
  :zou/optionals    {:models :tag/view-model}
  :zou/tags         [:tag/cargo]
  :dynamic?         #zou/when-dev true}

 :static-view-model
 {:zou/tags [:tag/view-model]}

 :assets
 {:zou/constructor zou.web.asset/map->AssetManager
  :zou/optionals {:asset-providers :tag/asset-provider}
  :zou/tags [:tag/route-provider :tag/view-model]}

 :cljsbuild
 {:zou/constructor zou.web.asset/map->CljsbuildAssetProvider
  :zou/tags [:tag/asset-provider]
  :builds [;; {:id "example",
           ;;  :path "/js/dist/example.js"
           ;;  :source-paths ["src-cljs"]
           ;;  :figwheel true
           ;;  :build-options
           ;;  {:main zou-demo.core
           ;;   :asset-path "/js/dist/out"
           ;;   :output-to "resources/public/js/dist/example.js"
           ;;   :output-dir "resources/public/js/dist/out"
           ;;   :source-map-timestamp true}}
           ]}

 :sassc
 {:zou/constructor zou.web.sassc/map->SasscCompiler
  :zou/tags [:tag/asset-provider]
  :builds [ ;; {:src        "src-scss/main.scss"
           ;;  :output-to  "resources/public/css/dist/test.css"
           ;;  :style      "compressed"
           ;;  :load-path  "src/scss"
           ;;  :serve-path "/css/dist/test.css"}
           ]
  :watch? #zou/if-prod [false true]
  :initial-build? #zou/if-prod [false true]}

 :request-context
 {:zou/constructor zou.web.context/map->RequestContext}


 ;; middlewares
 ;; -----------
 :middlewares
 {:zou/constructor zou.web.middleware.aggregator/map->MiddlewareAggregator
  :zou/optionals {:middlewares :tag/middleware}
  :inject-context-updater? true
  ;; :configurator #resolve zou.web.middleware/configurator
  :dependency-map {:prone {:stacktrace-web :after
                           :stacktrace-log :after}
                   :stacktrace-web {:stacktrace-log :before}
                   :response-exception-handler {:prone :after
                                                :stacktrace-web :after
                                                :stacktrace-log :after
                                                :error-handler :after}
                   :error-handler {:ring-defaults :after}
                   :nrepl-out-bridge {:prone :before
                                      :stacktrace-log :before}
                   :routing-middleware {:response-exception-handler :after}
                   :pseudo-method {:ring-defaults :after
                                   :routing-middleware :before}
                   :webjars {:routing-middleware :before}}}

 :routed-middlewares
 {:zou/constructor zou.web.middleware.aggregator/map->MiddlewareAggregator
  :zou/optionals {:middlewares :tag/routed-middleware}
  ;; :configurator #resolve zou.web.middleware/configurator
  :dependency-map {}}

 :request-logger
 {:zou/constructor zou.web.middleware.request-logger/map->RequestLogger
  :blacklist-pattern #"^/(?:js|css|images)/.*"}

 :prone
 {:zou/constructor zou.web.middleware/prone
  :zou/tags [:tag/middleware]
  :zou/disabled #zou/when-prod true
  :app-namespaces [zou]}

 :stacktrace-web
 {:zou/constructor zou.web.middleware/stacktrace-web
  :zou/disabled #zou/when-prod true
  :zou/tags [:tag/middleware]}

 :stacktrace-log
 {:zou/constructor zou.web.middleware/stacktrace-log
  :zou/tags [:tag/middleware]}

 :error-handler
 {:zou/constructor zou.web.middleware/error-handler
  :zou/tags [:tag/middleware]
  :zou/dependencies {:request-context :request-context}}

 :response-exception-handler
 {:zou/constructor zou.web.middleware/response-exception-handler
  :zou/tags [:tag/middleware]}

 :pseudo-method
 {:zou/constructor zou.web.middleware/pseudo-method
  :zou/tags [:tag/middleware]}

 :ring-defaults
 {:zou/constructor zou.web.middleware/defaults
  :zou/tags        [:tag/middleware]

  ;; site defaults
  :params          {:urlencoded true
                    :multipart  true
                    :nested     true
                    :keywordize true}
  :cookies         true
  :session         {:flash true
                    :cookie-attrs {:http-only true}}
  :security        {:anti-forgery   true
                    :xss-protection {:enable? true, :mode :block}
                    :frame-options  :sameorigin
                    :content-type-options :nosniff}
  :static          {:resources "public"}
  :responses       {:not-modified-responses true
                    :absolute-redirects     true
                    :content-types          true
                    :default-charset        "utf-8"}}

 :nrepl-out-bridge
 {:zou/constructor zou.web.middleware/nrepl-out-bridge
  :zou/disabled #zou/when-prod true
  :zou/tags [:tag/middleware]}

 :routing-middleware
 {:zou/constructor zou.web.routing/map->RoutingMiddleware
  :zou/tags [:tag/middleware]
  :zou/dependencies {:router :router}}

 :reload-middleware
 {:zou/constructor zou.web.middleware/reload
  :zou/disabled #zou/when-prod true
  :zou/tags [:tag/middleware]}

 :webjars
 {:zou/constructor zou.web.middleware/webjars
  :zou/tags [:tag/middleware]
  :prefix "assets"}

 :container
 {:zou/constructor zou.web.middleware.container/map->Container
  :zou/tags [:tag/middleware]
  :zou/optionals {:cargos :tag/cargo}}

 :args-mapper
 {:zou/constructor zou.web.handler/args-mapper
  :zou/tags [:tag/routed-middleware]}}
